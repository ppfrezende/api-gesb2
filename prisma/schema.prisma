generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SERVICE
  RH
  FINANCE
  COMERCIAL
  GUEST
}

model User {
  id                   String                @id @default(uuid())
  name                 String
  sector               String
  email                String
  password_hash        String
  role                 Role                  @default(GUEST)
  avatar               String?
  employees            Employee[]
  service_providers    ServiceProvider[]
  billing_orders       BillingOrder[]
  sites                Site[]
  technicians          Technician[]
  customers            Customer[]
  timesheetsdata       TimeSheetData[]
  interventions        Intervention[]
  interventionExpenses InterventionExpense[]
  technicianExpenses   TechnicianExpense[]
  created_at           DateTime              @default(now())
  updated_at           DateTime              @updatedAt
  isDeleted            Boolean               @default(false)
  deleted_at           DateTime?
  deletedBy            String?
  createdBy            String?

  @@map("users")
}

model Employee {
  id                  String    @id @default(uuid())
  registration_number String
  cpf                 String
  name                String
  email               String
  admission_at        DateTime  @default(now())
  phone               String
  cep                 String
  street              String
  number              String
  complement          String
  city                String
  uf                  String
  job_title           String
  avatar              String?
  skills              String?
  salary              Int
  created_at          DateTime  @default(now())
  User                User?     @relation(fields: [userId], references: [id])
  userId              String?
  updated_at          DateTime  @updatedAt
  isDeleted           Boolean   @default(false)
  deleted_at          DateTime?
  deletedBy           String?

  @@map("employees")
}

model ServiceProvider {
  id                  String    @id @default(uuid())
  registration_number String
  cpf                 String
  cnpj                String
  name                String
  company             String
  email               String
  start_of_contract   DateTime  @default(now())
  contract_validity   DateTime  @default(now())
  phone               String
  cep                 String
  street              String
  number              String
  complement          String
  city                String
  uf                  String
  job_title           String
  avatar              String?
  skills              String?
  updated_at          DateTime  @updatedAt
  isDeleted           Boolean   @default(false)
  deleted_at          DateTime?
  deletedBy           String?

  created_at DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@map("service_providers")
}

model Technician {
  id                  String              @id
  name                String
  email               String
  job_title           String
  registration_number String?
  skills              String?
  created_at          DateTime            @default(now())
  timesheetdata       TimeSheetData[]
  timesheetday        TimeSheetDay[]
  sites               Site[]
  interventions       Intervention[]
  TechSite            TechSite[]
  technicianExpenses  TechnicianExpense[]
  User                User?               @relation(fields: [userId], references: [id])
  userId              String?
  updated_at          DateTime            @updatedAt
  isDeleted           Boolean             @default(false)
  deleted_at          DateTime?
  deletedBy           String?

  @@map("technicians")
}

model Site {
  id                  String          @id @default(uuid())
  name                String
  description         String?
  operation_zone      String?
  emergency_phone     String?
  emergency_email     String?
  administrator_name  String?
  administrator_phone String?
  administrator_email String?
  isOffshore          Boolean?        @default(false)
  created_at          DateTime        @default(now())
  User                User?           @relation(fields: [userId], references: [id])
  userId              String?
  technicians         Technician[]
  timesheetsdata      TimeSheetData[]
  TechSite            TechSite[]
  interventions       Intervention[]
  updated_at          DateTime        @updatedAt
  isDeleted           Boolean         @default(false)
  deleted_at          DateTime?
  deletedBy           String?

  @@map("sites")
}

model TechSite {
  technician   Technician @relation(fields: [technicianId], references: [id])
  technicianId String
  site         Site       @relation(fields: [siteId], references: [id])
  siteId       String

  @@id([siteId, technicianId])
}

model BillingOrder {
  id                         String         @id @default(uuid())
  description                String
  isDoubled                  Boolean        @default(false)
  over_days                  Int?
  onshore_travel_hour_value  Int            @default(0)
  onshore_normal_hour_value  Int            @default(0)
  onshore_extra_hour_value   Int            @default(0)
  onshore_double_hour_value  Int            @default(0)
  onshore_night_hour_value   Int            @default(0)
  onshore_over_hour_value    Int            @default(0)
  offshore_travel_hour_value Int            @default(0)
  offshore_normal_hour_value Int            @default(0)
  offshore_extra_hour_value  Int            @default(0)
  offshore_double_hour_value Int            @default(0)
  offshore_night_hour_value  Int            @default(0)
  offshore_over_hour_value   Int            @default(0)
  max_hours_day_onshore      Int?
  max_hours_day_offshore     Int?
  max_hours_day_travel       Int?
  whatsCalendar              String
  currency                   String
  expense_administration_tax Int
  created_at                 DateTime       @default(now())
  User                       User?          @relation(fields: [userId], references: [id])
  userId                     String?
  interventions              Intervention[]
  Customer                   Customer?      @relation(fields: [customerId], references: [id])
  customerId                 String?
  updated_at                 DateTime       @updatedAt
  isDeleted                  Boolean        @default(false)
  deleted_at                 DateTime?
  deletedBy                  String?

  @@map("billing_orders")
}

model TimeSheetDay {
  id              String         @id @default(uuid())
  day             DateTime       @default(now())
  departure       Float?
  arrival         Float?
  rangeAfrom      Float?
  rangeAto        Float?
  rangeBfrom      Float?
  rangeBto        Float?
  rangeCfrom      Float?
  rangeCto        Float?
  rangeDfrom      Float?
  rangeDto        Float?
  isOffshore      Boolean?       @default(false)
  TimeSheetData   TimeSheetData? @relation(fields: [timeSheetDataId], references: [id])
  timeSheetDataId String?
  Technician      Technician?    @relation(fields: [technicianId], references: [id])
  technicianId    String?

  @@map("timesheet_days")
}

model TimeSheetData {
  id                  String         @id @default(uuid())
  first_date          DateTime?
  second_date         DateTime?
  intervention_number String?
  isInternational     Boolean?       @default(false)
  timesheetdays       TimeSheetDay[]
  created_at          DateTime       @default(now())
  User                User?          @relation(fields: [userId], references: [id])
  userId              String?
  Technician          Technician?    @relation(fields: [technicianId], references: [id])
  technicianId        String?
  Intervention        Intervention?  @relation(fields: [interventionId], references: [id])
  interventionId      String?
  Customer            Customer?      @relation(fields: [customerId], references: [id])
  customerId          String?
  Site                Site?          @relation(fields: [siteId], references: [id])
  siteId              String?
  updated_at          DateTime       @updatedAt
  isDeleted           Boolean        @default(false)
  deleted_at          DateTime?
  deletedBy           String?

  @@map("timesheets_data")
}

model Intervention {
  id                       String                  @id @default(uuid())
  progressive              String
  intervention_number      String
  customer_po_number       String
  job_number               String
  isMonthly                Boolean                 @default(false)
  initial_at               DateTime?
  finished_at              DateTime?
  total_value              Int?
  created_at               DateTime                @default(now())
  Technician               Technician?             @relation(fields: [technicianId], references: [id])
  technicianId             String?
  Site                     Site?                   @relation(fields: [siteId], references: [id])
  siteId                   String?
  User                     User?                   @relation(fields: [userId], references: [id])
  userId                   String?
  Customer                 Customer?               @relation(fields: [customerId], references: [id])
  customerId               String?
  CustomerProjectManager   CustomerProjectManager? @relation(fields: [customerProjectManagerId], references: [id])
  customerProjectManagerId String?
  BillingOrder             BillingOrder?           @relation(fields: [billingOrderId], references: [id])
  billingOrderId           String?
  timesheets               TimeSheetData[]

  interventionExpenses InterventionExpense[]
  updated_at           DateTime              @updatedAt
  isDeleted            Boolean               @default(false)
  deleted_at           DateTime?
  deletedBy            String?

  @@map("interventions")
}

model InterventionExpense {
  id              String        @id @default(uuid())
  expense_date    DateTime      @default(now())
  expense_type    String
  description     String
  currency        String
  currency_quote  Int
  expense_value   Int
  total_converted Int
  created_at      DateTime      @default(now())
  Intervention    Intervention? @relation(fields: [interventionId], references: [id])
  interventionId  String?
  User            User?         @relation(fields: [userId], references: [id])
  userId          String?
  updated_at      DateTime      @updatedAt
  isDeleted       Boolean       @default(false)
  deleted_at      DateTime?
  deletedBy       String?

  @@map("intervention_expenses")
}

model TechnicianExpense {
  id              String   @id @default(uuid())
  expense_date    DateTime @default(now())
  expense_type    String
  description     String
  currency        String
  currency_quote  Int
  expense_value   Int
  total_converted Int
  created_at      DateTime @default(now())

  User         User?       @relation(fields: [userId], references: [id])
  userId       String?
  Technician   Technician? @relation(fields: [technicianId], references: [id])
  technicianId String?
  updated_at   DateTime    @updatedAt
  isDeleted    Boolean     @default(false)
  deleted_at   DateTime?
  deletedBy    String?

  @@map("technician_expenses")
}

model Customer {
  id                   String   @id @default(uuid())
  company_name         String
  cnpj                 String
  phone                String?
  cep                  String?
  street               String?
  establishment_number String?
  complement           String?
  city                 String?
  uf                   String?
  created_at           DateTime @default(now())

  project_managers CustomerProjectManager[]
  billing_orders   BillingOrder[]
  interventions    Intervention[]
  timesheetsdata   TimeSheetData[]
  User             User?                    @relation(fields: [userId], references: [id])
  userId           String?
  updated_at       DateTime                 @updatedAt
  isDeleted        Boolean                  @default(false)
  deleted_at       DateTime?
  deletedBy        String?

  @@map("customers")
}

model CustomerProjectManager {
  id         String   @id @default(uuid())
  name       String
  job_title  String?
  phone      String?
  email      String?
  created_at DateTime @default(now())

  interventions Intervention[]
  Customer      Customer?      @relation(fields: [customerId], references: [id])
  customerId    String?
  updated_at    DateTime       @updatedAt
  isDeleted     Boolean        @default(false)
  deleted_at    DateTime?
  deletedBy     String?

  @@map("customer_project_managers")
}
