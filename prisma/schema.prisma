generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SERVICE
  RH
  FINANCE
  GUEST
}

model User {
  id                String              @id @default(uuid())
  name              String              @unique
  sector            String
  email             String              @unique
  password_hash     String
  role              Role                @default(GUEST)
  avatar            String?
  created_at        DateTime            @default(now())
  employees         Employee[]
  service_providers ServiceProvider[]
  purchase_orders   PurchaseOrder[]
  sites             Site[]
  technicians       Technician[]
  customers         Customer[]
  timesheetsdata    TimeSheetData[]
  interventions     Intervention[]
  expenses          Expense[]
  InvoiceToCustomer InvoiceToCustomer[]

  @@map("users")
}

model Employee {
  id                  String   @id @default(uuid())
  registration_number String   @unique
  cpf                 String   @unique
  name                String
  email               String   @unique
  admission_at        DateTime @default(now())
  phone               String
  cep                 String
  street              String
  number              String
  complement          String
  city                String
  uf                  String
  job_title           String
  avatar              String?
  salary              Int
  created_at          DateTime @default(now())
  User                User?    @relation(fields: [userName], references: [name])
  userName            String?

  @@map("employees")
}

model ServiceProvider {
  id                  String   @id @default(uuid())
  registration_number String   @unique
  cpf                 String   @unique
  cnpj                String   @unique
  name                String
  company             String
  email               String   @unique
  start_of_contract   DateTime @default(now())
  contract_validity   DateTime @default(now())
  phone               String
  cep                 String
  street              String
  number              String
  complement          String
  city                String
  uf                  String
  job_title           String
  avatar              String?

  created_at DateTime @default(now())
  User       User?    @relation(fields: [userName], references: [name])
  userName   String?

  @@map("service_providers")
}

model Technician {
  id                  String              @id
  name                String
  email               String              @unique
  job_title           String
  registration_number String?             @unique
  created_at          DateTime            @default(now())
  timesheetdata       TimeSheetData[]
  timesheetday        TimeSheetDay[]
  sites               Site[]
  interventions       Intervention[]
  TechSite            TechSite[]
  expenses            Expense[]
  invoicesToCustomer  InvoiceToCustomer[]
  User                User?               @relation(fields: [userName], references: [name])
  userName            String?

  @@map("technicians")
}

model Site {
  id                 String              @id @default(uuid())
  description        String
  isOffshore         Boolean?            @default(false)
  created_at         DateTime            @default(now())
  User               User?               @relation(fields: [userName], references: [name])
  userName           String?
  technicians        Technician[]
  timesheetsdata     TimeSheetData[]
  TechSite           TechSite[]
  invoicesToCustomer InvoiceToCustomer[]

  interventions Intervention[]

  @@map("sites")
}

model TechSite {
  technician   Technician @relation(fields: [technicianId], references: [id])
  technicianId String
  site         Site       @relation(fields: [siteId], references: [id])
  siteId       String

  @@id([siteId, technicianId])
}

model PurchaseOrder {
  id                         String         @id @default(uuid())
  name                       String         @unique
  description                String
  factor_HE_onshore          Float?
  factor_HE_offshore         Float?
  factor_HN_onshore          Float?
  factor_HN_offshore         Float?
  factor_holiday_onshore     Float?
  factor_holiday_offshore    Float?
  factor_night_onshore       Float?
  factor_night_offshore      Float?
  over_days                  Int?
  time_onshore               String
  time_offshore              String
  time_travel                String
  isMonthly                  Boolean
  whatsCalendar              String
  currency                   String
  expense_administration_tax Int
  created_at                 DateTime       @default(now())
  User                       User?          @relation(fields: [userName], references: [name])
  userName                   String?
  skills                     Skill[]
  interventions              Intervention[]

  @@map("purchase_orders")
}

model Skill {
  id                String         @id @default(uuid())
  skill_description String
  travel_hour       Int
  normal_hour       Int
  created_at        DateTime       @default(now())
  PurchaseOrder     PurchaseOrder? @relation(fields: [id_PO], references: [id])
  id_PO             String?
  interventions     Intervention[]

  @@map("skills")
}

model TimeSheetDay {
  id              String         @id @default(uuid())
  day             DateTime       @default(now())
  departure       Float?
  arrival         Float?
  rangeAfrom      Float?
  rangeAto        Float?
  rangeBfrom      Float?
  rangeBto        Float?
  rangeCfrom      Float?
  rangeCto        Float?
  rangeDfrom      Float?
  rangeDto        Float?
  isOffshore      Boolean?       @default(false)
  TimeSheetData   TimeSheetData? @relation(fields: [timeSheetDataId], references: [id])
  timeSheetDataId String?
  Technician      Technician?    @relation(fields: [technicianId], references: [id])
  technicianId    String?

  @@map("timesheet_days")
}

model TimeSheetData {
  id                  String             @id @default(uuid())
  first_date          DateTime?
  second_date         DateTime?
  intervention_number String?
  isInternational     Boolean?           @default(false)
  timesheetdays       TimeSheetDay[]
  created_at          DateTime           @default(now())
  User                User?              @relation(fields: [userName], references: [name])
  userName            String?
  Technician          Technician?        @relation(fields: [technicianId], references: [id])
  technicianId        String?
  Intervention        Intervention?      @relation(fields: [interventionId], references: [id])
  interventionId      String?
  Customer            Customer?          @relation(fields: [customerId], references: [id])
  customerId          String?
  Site                Site?              @relation(fields: [siteId], references: [id])
  siteId              String?
  InvoiceToCustomer   InvoiceToCustomer? @relation(fields: [invoiceToCustomerId], references: [id])
  invoiceToCustomerId String?

  @@map("timesheets_data")
}

model Intervention {
  id                            String                          @id @default(uuid())
  progressive                   String                          @unique
  intervention_number           String
  po_number                     String
  job_number                    String
  isOffshore                    Boolean?                        @default(false)
  initial_at                    DateTime?
  finished_at                   DateTime?
  created_at                    DateTime                        @default(now())
  Technician                    Technician?                     @relation(fields: [technicianId], references: [id])
  technicianId                  String?
  Site                          Site?                           @relation(fields: [siteId], references: [id])
  siteId                        String?
  User                          User?                           @relation(fields: [userName], references: [name])
  userName                      String?
  Customer                      Customer?                       @relation(fields: [customerId], references: [id])
  customerId                    String?
  CustomerProjectManager        CustomerProjectManager?         @relation(fields: [customerProjectManagerId], references: [id])
  customerProjectManagerId      String?
  PurchaseOrder                 PurchaseOrder?                  @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId               String?
  Skill                         Skill?                          @relation(fields: [skillId], references: [id])
  skillId                       String?
  expenses                      Expense[]
  timesheets                    TimeSheetData[]
  InvoiceToCustomer             InvoiceToCustomer[]
  InvoiceToCustomerIntervention InvoiceToCustomerIntervention[]

  @@map("interventions")
}

model Customer {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())

  project_managers   CustomerProjectManager[]
  interventions      Intervention[]
  timesheetsdata     TimeSheetData[]
  invoicesToCustomer InvoiceToCustomer[]
  User               User?                    @relation(fields: [userName], references: [name])
  userName           String?

  @@map("customers")
}

model CustomerProjectManager {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())

  interventions Intervention[]
  Customer      Customer?      @relation(fields: [customerId], references: [id])
  customerId    String?

  @@map("customer_project_managers")
}

model Expense {
  id              String        @id @default(uuid())
  expense_date    DateTime      @default(now())
  expense_type    String
  description     String
  currency        String
  currency_quote  Int
  expense_value   Int
  total_converted Int
  created_at      DateTime      @default(now())
  Intervention    Intervention? @relation(fields: [interventionId], references: [id])
  interventionId  String?
  Technician      Technician?   @relation(fields: [technicianId], references: [id])
  technicianId    String?
  User            User?         @relation(fields: [userName], references: [name])
  userName        String?

  @@map("expenses")
}

model InvoiceToCustomer {
  id                            String                          @id @default(uuid())
  isDolarInvoice                Boolean                         @default(false)
  invoice_currency_quote        Int?
  final_total                   Int?
  isApproved                    Boolean                         @default(false)
  timesheetsdata                TimeSheetData[]
  Intervention                  Intervention?                   @relation(fields: [interventionId], references: [id])
  interventionId                String?
  created_at                    DateTime                        @default(now())
  User                          User?                           @relation(fields: [userName], references: [name])
  userName                      String?
  InvoiceToCustomerIntervention InvoiceToCustomerIntervention[]
  Technician                    Technician?                     @relation(fields: [technicianId], references: [id])
  technicianId                  String?
  Site                          Site?                           @relation(fields: [siteId], references: [id])
  siteId                        String?
  Customer                      Customer?                       @relation(fields: [customerId], references: [id])
  customerId                    String?

  @@map("invoice_to_customer")
}

model InvoiceToCustomerIntervention {
  Intervention        Intervention      @relation(fields: [interventionId], references: [id])
  interventionId      String
  invoiceToCustomer   InvoiceToCustomer @relation(fields: [invoiceToCustomerId], references: [id])
  invoiceToCustomerId String

  @@id([interventionId, invoiceToCustomerId])
}
